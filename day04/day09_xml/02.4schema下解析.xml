




<!--	* 操作xml文档
		1. 解析(读取)：将文档中的数据读取到内存中
		2. 写入：将内存中的数据保存到xml文档中。持久化的存储

	* 解析xml的方式：
		1. DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树
			* 优点：操作方便，可以对文档进行CRUD的所有操作
			* 缺点：占内存
		2. SAX：逐行读取，基于事件驱动的。
			* 优点：不占内存。
			* 缺点：只能读取，不能增删改-->

<!--SAX（Simple API for XML）是一种处理和解析XML文档的编程接口，它基于事件驱动的模型。
SAX 不同于DOM（Document Object Model）方式，它不需要将整个 XML 文档加载到内存中，而是在解析过程中逐个节点地生成事件，
应用程序可以根据这些事件来处理文档内容。

    SAX 解析器解析文档时会触发一系列的事件，这些事件包括：
    开始文档事件（startDocument）： 表示解析过程开始，通常在解析文档的开头触发。
    结束文档事件（endDocument）： 表示解析过程结束，通常在解析文档的结尾触发。
    开始元素事件（startElement）： 表示解析器遇到一个元素的开始标签，会触发这个事件，并提供元素的名称、属性等信息。
    结束元素事件（endElement）： 表示解析器遇到一个元素的结束标签，会触发这个事件，并提供元素的名称。
    字符数据事件（characters）： 表示解析器遇到文本内容，会触发这个事件，提供文本内容。
    注释事件（comment）： 表示解析器遇到注释，会触发这个事件，提供注释内容。
    通过实现 SAX 事件处理器，应用程序可以在解析文档时针对特定事件执行自定义的处理逻辑。
        由于 SAX 采用流式处理，它适用于处理大型XML文档，因为不需要将整个文档加载到内存中，
        只需要在解析过程中保持一些状态信息。-->